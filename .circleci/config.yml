version: 2
references:
  pre_setup: &pre_setup
    run:
      name: Install System Packages
      command: |
        apt-get update
        apt-get -y install clang pkg-config curl libssl-dev zlib1g-dev libsodium-dev libc++-dev

  setup_rust: &setup_rust
    run:
      name: Setup nightly
      command: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        export PATH=$PATH:$HOME/.cargo/bin

  build_dev: &build_dev
    run:
      name: Build project debug
      command: |
        export PATH=$PATH:$HOME/.cargo/bin
        export CC=clang
        export CXX=clang++
        export RUSTFLAGS=-Awarnings
        rustc --version
        cargo build -p dmbc -p dmbc-node -p dmbc-discovery

  build_prod: &build_prod
    run:
      name: Build project prod
      command: |
        source $HOME/.cargo/env
        export CC=clang
        export CXX=clang++
        export RUSTFLAGS=-Awarnings
        RUSTFLAGS=-Awarnings cargo build -p dmbc -p dmbc-node -p dmbc-discovery --release

  run_tests: &run_tests
    run:
      name: Run Tests
      command: |
        source $HOME/.cargo/env
        export CC=clang
        export CXX=clang++
        export RUSTFLAGS=-Awarnings
        RUSTFLAGS=-Awarnings cargo test -p dmbc --color=always --release --jobs 2 -- --test-threads=1

  save_cache: &save_cache
    save_cache:
      key: suntechsoft-dmarket-blockchain-{{ .Branch }}-{{ .Revision }}
      paths:
        - "/project/target/debug/dmbc-node"
        - "/project/target/debug/dmbc-discovery"
        - "/project/target/release/dmbc-node"
        - "/project/target/release/dmbc-discovery"
        - Dockerfile
        - "/project/etc"
        - "/root/.cargo/registry"

  restore_cache: &restore_cache
    restore_cache:
      keys:
        - suntechsoft-dmarket-blockchain-{{ .Branch }}-{{ .Revision }}

  setup_coverage: &setup_coverage
    run:
      name: Install Coverage Dependencies
      command: |
        wget https://github.com/SimonKagstrom/kcov/archive/v34.zip -O /tmp/kcov.zip
        unzip /tmp/kcov.zip
        cd kcov-34
        cmake .
        make -j$(nproc)
        make install

  coverage: &coverage
    run:
      name: Generate Coverage
      command: |
        TESTS=`find target/debug -maxdepth 1 -type f -executable |  grep -v -E '(dmbc-node|dmbc-discovery|dmbc-flooder|dmbc-fuzzer|dmbc-bot)'`
        for i in $TESTS; do mkdir -p target/debug/coverage/$i && kcov --verify --include-path dmbc target/debug/coverage/$i $i --test-threads=1; done
        kcov --merge target/debug/coverage/merged/ target/debug/coverage/target/debug/*
        #kcov --verify --include-path dmbc target/debug/coverage $(find target/debug -maxdepth 1 -type f -executable | grep -v -E '(dmbc-node|dmbc-discovery|dmbc-flooder|dmbc-fuzzer|dmbc-bot)')

  build_dev_image: &build_dev_image
    run:
      name: Build and Push docker container
      command: |
            
            source VERSION

            echo "DOCKER_VERSION - " $DOCKER_VERSION
            echo "DOCKER_SHORT_VERSION -" $DOCKER_SHORT_VERSION
            echo "DOCKER_FULL_VERSION - " $DOCKER_FULL_VERSION

            docker build -t globalgames/dmarket-blockchain:$DOCKER_VERSION 

            docker tag globalgames/dmarket-blockchain:$DOCKER_VERSION globalgames/dmarket-blockchain:$DOCKER_SHORT_VERSION
            docker tag globalgames/dmarket-blockchain:$DOCKER_VERSION globalgames/dmarket-blockchain:$DOCKER_FULL_VERSION
            docker push globalgames/dmarket-blockchain:$DOCKER_VERSION
            docker push globalgames/dmarket-blockchain:$DOCKER_SHORT_VERSION
            docker push globalgames/dmarket-blockchain:$DOCKER_FULL_VERSION

        # docker build -t globalgames/dmarket-blockchain .
        # export TAG=$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM
        # docker tag globalgames/dmarket-blockchain globalgames/dmarket-blockchain:$TAG
        # docker push globalgames/dmarket-blockchain:$TAG

  build_prod_image: &build_prod_image
    run:
      name: Build and Push docker container
      command: |
         source VERSION

            echo "DOCKER_VERSION - " $DOCKER_VERSION
            echo "DOCKER_SHORT_VERSION -" $DOCKER_SHORT_VERSION
            echo "DOCKER_FULL_VERSION - " $DOCKER_FULL_VERSION

            docker build -t globalgames/dmarket-blockchain:$DOCKER_VERSION 

            docker tag globalgames/dmarket-blockchain:$DOCKER_VERSION globalgames/dmarket-blockchain:$DOCKER_SHORT_VERSION
            docker tag globalgames/dmarket-blockchain:$DOCKER_VERSION globalgames/dmarket-blockchain:$DOCKER_FULL_VERSION
            docker push globalgames/dmarket-blockchain:$DOCKER_VERSION
            docker push globalgames/dmarket-blockchain:$DOCKER_SHORT_VERSION
            docker push globalgames/dmarket-blockchain:$DOCKER_FULL_VERSION
   

        # docker build -t globalgames/dmarket-blockchain . --build-arg TYPE=release
        # if [[ -z "$CIRCLE_TAG" ]]
        #   then
        #     export APP_VERSION=`echo $CIRCLE_BRANCH | awk -F "/" '{print $2}'`
        #   else
        #     export APP_VERSION=$CIRCLE_TAG
        # fi
        # docker tag globalgames/dmarket-blockchain globalgames/dmarket-blockchain:$APP_VERSION
        # docker push globalgames/dmarket-blockchain:$APP_VERSION

  docker_login: &docker_login
    run:
      name: Docker Login
      command: echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin

  set_version:
    steps:
      - run:
          name: Set VERSION
          command: |
            BRANCH=`echo $CIRCLE_BRANCH | sed 's/.*\/\(.*\)/\1/' | awk '{print tolower($0)}' | tr _ - `
            echo "BRANCH=$BRANCH"
            if [[ -z "$CIRCLE_TAG" ]]
                then
                    export APP_VERSION=$BRANCH
                else
                    export APP_VERSION=`echo $CIRCLE_TAG | sed 's/\(v[0-9]*\.[0-9]*\.[0-9]*\).*/\1/'`
            fi
            echo "APP_VERSION=$APP_VERSION"
            # v1.2.3 -> v1
            # develop -> develop
            if echo $APP_VERSION | grep -Eq 'v[0-9]+\.[0-9]+\.[0-9]+'
              then
                MAJOR_VERSION=`echo $APP_VERSION | sed  's/\(v[0-9]*\).*/\1/'`
              else
                MAJOR_VERSION=$APP_VERSION
            fi
            echo "MAJOR_VERSION=$MAJOR_VERSION"
            # v1.2.3 -> v1.2
            # develop -> develop
            if echo $APP_VERSION | grep -Eq 'v[0-9]+\.[0-9]+\.[0-9]+'
              then
                MINOR_VERSION=`echo $APP_VERSION | sed  's/\(v[0-9]*\.[0-9]*\).*/\1/'`
              else
                MINOR_VERSION=$APP_VERSION
            fi
            echo "MINOR_VERSION=$MINOR_VERSION"
            #v1.2.3 -> v1-2-3
            HELM_VERSION=`echo $APP_VERSION | sed -e 's/\./-/g'`
            echo "HELM_VERSION=$HELM_VERSION"
            # v1.2.3-uiaidb-355
            DOCKER_FULL_VERSION=$APP_VERSION-${CIRCLE_SHA1:0:7}-$CIRCLE_BUILD_NUM

            if [[ -z "$CIRCLE_TAG" ]]; then
              DOCKER_VERSION=$DOCKER_FULL_VERSION
            else
              DOCKER_VERSION=$APP_VERSION
            fi

            DOCKER_SHORT_VERSION=$APP_VERSION-$CIRCLE_BUILD_NUM

            echo "export BRANCH=$BRANCH" > VERSION
            echo "export VERSION=$VERSION" >> VERSION
            echo "export APP_VERSION=$APP_VERSION" >> VERSION
            echo "export MAJOR_VERSION=$MAJOR_VERSION" >> VERSION
            echo "export MINOR_VERSION=$MINOR_VERSION" >> VERSION
            echo "export HELM_VERSION=$HELM_VERSION" >> VERSION
            echo "export DOCKER_FULL_VERSION=$DOCKER_FULL_VERSION" >> VERSION
            echo "export DOCKER_VERSION=$DOCKER_VERSION" >> VERSION
            echo "export DOCKER_SHORT_VERSION=$DOCKER_SHORT_VERSION" >> VERSION    

  
jobs:
  build_debug:
    working_directory: /project

    docker:
      - image: ubuntu:bionic
    resource_class: xlarge

    steps:
      - checkout
#      - *restore_cache
      - *pre_setup
      - *setup_rust
      - *build_dev
      - *run_tests
      - *save_cache
  #      - *setup_coverage
  #      - *coverage
  #      - store_artifacts:
  #          path: target/debug/coverage/merged

  build_release:
    working_directory: /project

    docker:
      - image: ubuntu:bionic
    resource_class: xlarge

    steps:
      - checkout
#      - *restore_cache
      - *pre_setup
      - *setup_rust
      - *build_prod
      - *run_tests
      - *save_cache
  #      - *setup_coverage
  #      - *coverage
  #      - store_artifacts:
  #          path: target/debug/coverage/merged


  build_docker_dev:
    working_directory: /project
    docker:
      - image: docker:git
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - *restore_cache
      - setup_remote_docker
      - *docker_login
      - *build_dev_image

  build_docker_release:
    working_directory: /project
    docker:
      - image: docker:git
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - *restore_cache
      - setup_remote_docker
      - *docker_login
      - *build_prod_image

workflows:
  version: 2
  debug:
    jobs:
      - build_debug:
          context: org-global
          filters:
            branches:
              ignore: /^release.*/
            tags:
              ignore: /.*/
      - build_docker_dev:
          context: org-global
          requires:
            - build_debug
          filters:
            branches:
              only: master
  release:
    jobs:
      - build_release:
          context: org-global
          filters:
            branches:
              only: /^release.*/
            tags:
              only: /^v.*/
      - build_docker_release:
          context: org-global
          requires:
            - build_release
          filters:
            branches:
              only: /^release.*/
            tags:
              only: /^v.*/
