version: 2
references:
  pre_setup: &pre_setup
    run:
      name: Install System Packages
      command: |
        apt-get update
        apt-get full-upgrade -y
        apt-get -y install libsodium-dev pkg-config clang unzip cmake make binutils-dev libcurl4-openssl-dev zlib1g-dev libdw-dev libiberty-dev

  setup_rust: &setup_rust
    run:
      name: Setup nightly
      command: |
        rustup default stable
        rustup update
        rustup show

  build_dev: &build_dev
    run:
      name: Build project debug
      command: |
        export CC=clang
        export CXX=clang++
        export RUSTFLAGS=-Awarnings
        rustc --version
        cargo build -p dmbc -p dmbc-node -p dmbc-discovery

  build_prod: &build_prod
    run:
      name: Build project prod
      command: |
        export CC=clang
        export CXX=clang++
        export RUSTFLAGS=-Awarnings
        cargo build -p dmbc -p dmbc-node -p dmbc-discovery --release

  run_tests: &run_tests
    run:
      name: Run Tests
      command: |
        export CC=clang
        export CXX=clang++
        export RUSTFLAGS=-Awarnings
        cargo test -p dmbc --color=always --jobs 2 -- --test-threads=1

  save_cache: &save_cache
    save_cache:
      key: suntechsoft-dmarket-blockchain-{{ .Branch }}-{{ .Revision }}
      paths:
        - "/project/target/debug/dmbc-node"
        - "/project/target/debug/dmbc-discovery"
        - "/project/target/release/dmbc-node"
        - "/project/target/release/dmbc-discovery"
        - Dockerfile
        - "/project/etc"
        - "/root/.cargo/registry"

  restore_cache: &restore_cache
    restore_cache:
      keys:
        - suntechsoft-dmarket-blockchain-{{ .Branch }}-{{ .Revision }}
        - suntechsoft-dmarket-blockchain-{{ .Branch }}
        - suntechsoft-dmarket-blockchain

  setup_coverage: &setup_coverage
    run:
      name: Install Coverage Dependencies
      command: |
        wget https://github.com/SimonKagstrom/kcov/archive/v34.zip -O /tmp/kcov.zip
        unzip /tmp/kcov.zip
        cd kcov-34
        cmake .
        make -j$(nproc)
        make install

  coverage: &coverage
    run:
      name: Generate Coverage
      command: |
        TESTS=`find target/debug -maxdepth 1 -type f -executable |  grep -v -E '(dmbc-node|dmbc-discovery|dmbc-flooder|dmbc-fuzzer|dmbc-bot)'`
        for i in $TESTS; do mkdir -p target/debug/coverage/$i && kcov --verify --include-path dmbc target/debug/coverage/$i $i --test-threads=1; done
        kcov --merge target/debug/coverage/merged/ target/debug/coverage/target/debug/*
        #kcov --verify --include-path dmbc target/debug/coverage $(find target/debug -maxdepth 1 -type f -executable | grep -v -E '(dmbc-node|dmbc-discovery|dmbc-flooder|dmbc-fuzzer|dmbc-bot)')

  build_dev_image: &build_dev_image
    run:
      name: Build and Push docker container
      command: |
        docker build -t globalgames/dmarket-blockchain .
        VERSION=`docker run --rm -ti globalgames/dmarket-blockchain /src/app/dmbc-node -v | awk '{print $3}'`
        TAG=$VERSION-$CIRCLE_BUILD_NUM
        docker tag globalgames/dmarket-blockchain globalgames/dmarket-blockchain:$TAG
        docker push globalgames/dmarket-blockchain:$TAG

  build_prod_image: &build_prod_image
    run:
      name: Build and Push docker container
      command: |
        docker build -t globalgames/dmarket-blockchain . --build-arg TYPE=release
        docker tag globalgames/dmarket-blockchain globalgames/dmarket-blockchain:$CIRCLE_TAG
        docker push globalgames/dmarket-blockchain:$CIRCLE_TAG
  
  docker_login: &docker_login
    run:
      name: Docker Login
      command: echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin        

jobs:
  build_debug:
    working_directory: /project

    docker:
      - image: rust:1.53
    resource_class: xlarge  

    steps:
      - checkout
      - *restore_cache
      - *pre_setup
#      - *setup_rust
      - *build_dev
      - *run_tests
      - *save_cache
      - *setup_coverage
      - *coverage
      - store_artifacts:
          path: target/debug/coverage/merged

  build_release:
    working_directory: /project

    docker:
      - image: rust:1.50
    

    steps:
      - checkout
      - *restore_cache
      - *pre_setup
      - *setup_rust
      - *build_prod
      - *run_tests
      - *save_cache
      - *setup_coverage
      - *coverage
      - store_artifacts:
          path: target/debug/coverage/merged


  build_docker_dev:
    working_directory: /project
    docker:
      - image: docker:git
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - *restore_cache
      - setup_remote_docker
      - *docker_login
      - *build_dev_image

  build_docker_release:
    working_directory: /project
    docker:
      - image: docker:git
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - *restore_cache
      - setup_remote_docker
      - *docker_login
      - *build_prod_image

workflows:
  version: 2
  debug:
    jobs:
      - build_debug:
          filters:
            tags:
              ignore: /.*/
      - build_docker_dev:
          requires:
            - build_debug
          filters:
            branches:
              only: master
  release:
    jobs:
      - build_release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - build_docker_release:
          requires:
            - build_release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

#      - run:
#          name: Install Docker client
#          command: |
#            set -x
#            VER="17.03.0-ce"
#            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
#            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
#            mv /tmp/docker/* /usr/bin
#
#      # build and test application
#      - run:
#          name: Build and Push api container
#          command: |
#            docker login -u $DOCKER_USER -p $DOCKER_PASS
#            docker build -t globalgames/dmarket-blockchain .
#            docker push globalgames/dmarket-blockchain
#
#      - run:
#          name: Deploy
#          command: |
#            curl -u ${CIRCLE_API_TOKEN}: \
#               -d build_parameters[CIRCLE_JOB]=deploy \
#               https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
#  deploy:
#    docker:
#      - image: cdrx/rancher-gitlab-deploy
#    working_directory: ~/
#    steps:
#      - run:
#          name: Upgrade services
#          command: |
#            TAG=$CIRCLE_BRANCH
#            ENVIRONMENT=videomarket-uat
#            upgrade --environment $ENVIRONMENT --stack $ENVIRONMENT --service api-cron --new-image globalgames/videomarket_api:latest --no-start-before-stopping
#            upgrade --environment $ENVIRONMENT --stack $ENVIRONMENT --service api --new-image globalgames/videomarket_api:latest --no-start-before-stopping


#      - run:
#          name: Install rancher cli
#          command: |
#            apt-get -y install python-setuptools
#            set -x
#            curl -L -o /tmp/deploy.tgz https://github.com/cdrx/rancher-gitlab-deploy/archive/1.3.tar.gz
#            tar -xz -C /tmp -f /tmp/deploy.tgz
#            cd /tmp/rancher-gitlab-deploy-1.3/ && python setup.py install
#            ln -s /usr/local/bin/rancher-gitlab-deploy /usr/local/bin/upgrade
#            TAG=$CIRCLE_BRANCH
#            ENVIRONMENT=videomarket-uat
#            upgrade --environment $ENVIRONMENT --stack $ENVIRONMENT --service api --new-image globalgames/videomarket_api:latest --no-start-before-stopping
#            upgrade --environment $ENVIRONMENT --stack $ENVIRONMENT --service nginx --no-start-before-stopping
